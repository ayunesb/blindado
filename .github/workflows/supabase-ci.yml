name: Supabase CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      target_sha:
        description: 'Commit SHA to roll back to'
        required: true
      functions:
        description: 'Space-separated function names (blank = all)'
        required: false

concurrency:
  group: supabase-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check required secrets
        shell: bash
        env:
          S_SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          S_SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          S_SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          S_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          S_ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
        run: |
          set -euo pipefail
          for v in S_SUPABASE_PROJECT_REF S_SUPABASE_ACCESS_TOKEN S_SUPABASE_DB_PASSWORD S_SUPABASE_ANON_KEY S_ADMIN_API_SECRET; do
            if [ -z "${!v:-}" ]; then echo "::error::Missing secret ${v#S_}"; exit 1; fi
          done

      - uses: supabase/setup-cli@v1

      - name: Login & link project
        shell: bash
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          echo "$SUPABASE_ACCESS_TOKEN" | supabase login --token -
          supabase link --project-ref "$SUPABASE_PROJECT_REF"

      - name: Push migrations
        shell: bash
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          set -euo pipefail
          # non-interactive push (DB password picked up by CLI)
          supabase db push

      - name: Optional seed
        if: vars.RUN_SEED == 'true'
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_DB_URL:-}" ]; then
            echo "No SUPABASE_DB_URL provided; skipping seed."; exit 0
          fi
          psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1 -f supabase/seed.sql

  smoke:
    runs-on: ubuntu-latest
    needs: migrations
    steps:
      - uses: actions/checkout@v4

      - name: Run smoke
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          set -euo pipefail
          chmod +x ./scripts/smoke.sh
          ./scripts/smoke.sh 2>&1 | tee smoke.log

      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: |
            smoke.log
          if-no-files-found: ignore

  # --- parallel deploy matrix (replaces single deploy job) ---
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: smoke
    outputs:
      list_json: ${{ steps.fl.outputs.list_json }}
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1

      - name: Login & link project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          supabase link --project-ref "$SUPABASE_PROJECT_REF"

      - name: Find changed functions (respects DEPLOY_ALL)
        id: fl
        shell: bash
        run: |
          set -euo pipefail
          BASE="${GITHUB_BASE_REF:-}"
          if [ -n "$BASE" ]; then RANGE="$BASE...$GITHUB_SHA"; else RANGE="HEAD~1...HEAD"; fi
          files="$(git diff --name-only $RANGE || true)"
          # dirs like supabase/functions/<fn>/...
          dirs="$(echo "$files" | grep -E '^supabase/functions/[^/]+/.+' || true | xargs -r -n1 dirname | sort -u || true)"
          list="$(for d in $dirs; do basename "$d"; done | tr '\n' ' ')"
          if [ "${{ vars.DEPLOY_ALL || '' }}" = "true" ] || [ -z "$list" ]; then
            list="$(for d in supabase/functions/*; do [ -d "$d" ] && basename "$d"; done | tr '\n' ' ')"
          fi
          echo "Functions to deploy: $list"
          # emit JSON array for the matrix
          arr_json="$(printf '%s\n' $list | jq -R . | jq -s .)"
          echo "list_json=$arr_json" >> "$GITHUB_OUTPUT"

      - name: Emit flags.json
        shell: bash
        env:
          FUNCTION_FLAGS_JSON: ${{ vars.FUNCTION_FLAGS_JSON }}
        run: |
          set -euo pipefail
          FLAGS_JSON="${FUNCTION_FLAGS_JSON:-}"
          if [ -z "$FLAGS_JSON" ]; then FLAGS_JSON='{"default":"--no-verify-jwt"}'; fi
          echo "$FLAGS_JSON" | jq . > /tmp/flags.json
          echo '${{ steps.fl.outputs.list_json }}' > /tmp/functions.json

      - name: Save function list & flags (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-plan
          path: |
            /tmp/flags.json
            /tmp/functions.json

  deploy_matrix:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        fn: ${{ fromJson(needs.deploy.outputs.list_json) }}
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
      - name: Login & link project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          supabase link --project-ref "$SUPABASE_PROJECT_REF"

      - name: Validate FUNCTION_FLAGS_JSON
        if: ${{ vars.FUNCTION_FLAGS_JSON != '' }}
        run: |
          echo '${{ vars.FUNCTION_FLAGS_JSON }}' | jq . >/dev/null

      - name: Prepare flags.json
        env:
          FUNCTION_FLAGS_JSON: ${{ vars.FUNCTION_FLAGS_JSON }}
        run: |
          set -euo pipefail
          FLAGS_JSON="${FUNCTION_FLAGS_JSON:-}"
          if [ -z "$FLAGS_JSON" ]; then FLAGS_JSON='{"default":"--no-verify-jwt"}'; fi
          echo "$FLAGS_JSON" | jq . > /tmp/flags.json
          echo "flags.json:" && cat /tmp/flags.json

      - name: Cache Deno modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('deno.json', 'import_map.json', 'supabase/functions/**/index.ts') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Deploy ${{ matrix.fn }}
        if: vars.DRY_RUN != 'true'
        shell: bash
        run: |
          set -euo pipefail
          FN='${{ matrix.fn }}'
          FLAGS="$(jq -r --arg k "$FN" 'if has($k) then .[$k] else .default end' /tmp/flags.json)"
          echo "==> Deploy $FN ${FLAGS:+($FLAGS)}"
          # shellcheck disable=SC2086
          supabase functions deploy "$FN" $FLAGS

  post_deploy_smoke:
    runs-on: ubuntu-latest
    needs: deploy_matrix
    steps:
      - uses: actions/checkout@v4
      - name: Post-deploy health check
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          set -euo pipefail
          chmod +x ./scripts/smoke.sh
          ./scripts/smoke.sh 2>&1 | tee post_deploy_smoke.log

      - name: Upload smoke logs (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-deploy-smoke-logs
          path: post_deploy_smoke.log

  rollback:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_sha }}
      - uses: supabase/setup-cli@v1
      - name: Login & link
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          supabase link --project-ref "$SUPABASE_PROJECT_REF"
      - name: Deploy (rollback)
        env:
          FUNCTION_FLAGS_JSON: ${{ vars.FUNCTION_FLAGS_JSON }}
        run: |
          set -euo pipefail
          FLAGS_JSON="${FUNCTION_FLAGS_JSON:-}"
          if [ -z "$FLAGS_JSON" ]; then FLAGS_JSON='{"default":"--no-verify-jwt"}'; fi
          echo "$FLAGS_JSON" | jq . > /tmp/flags.json
          list="${{ github.event.inputs.functions }}"
          if [ -z "$list" ]; then
            list="$(for d in supabase/functions/*; do [ -d "$d" ] && basename "$d"; done)"
          fi
          for fn in $list; do
            flags="$(jq -r --arg k "$fn" 'if has($k) then .[$k] else .default end' /tmp/flags.json)"
            echo "Rollback deploy $fn ${flags:+($flags)}"
            # shellcheck disable=SC2086
            supabase functions deploy "$fn" $flags
          done
