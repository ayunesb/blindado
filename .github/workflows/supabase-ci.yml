name: Supabase Migrations + Smoke

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]   # runs read-only checks; no secrets to forks
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: supabase-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Toggle seed step (optional)
  RUN_SEED: ${{ vars.RUN_SEED }}

jobs:
  migrations:
    name: Apply migrations to Supabase
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (for scripts/smoke.sh that might use node)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Login & link project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          supabase --version
          echo "${SUPABASE_ACCESS_TOKEN}" | supabase login --token -
          supabase link --project-ref "${SUPABASE_PROJECT_REF}"

      - name: Push migrations (remote)
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Non-interactive; uses linked project
          supabase db push --password "$SUPABASE_DB_PASSWORD"

      - name: Optional seed.sql
        if: env.RUN_SEED == 'true'
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          if [ -z "$SUPABASE_DB_URL" ]; then
            echo "SUPABASE_DB_URL not set; skipping seed.sql"; exit 0
          fi
          sudo apt-get update && sudo apt-get install -y postgresql-client
          psql "$SUPABASE_DB_URL" -v "ON_ERROR_STOP=1" -f supabase/seed.sql

      - name: Upload migration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-artifacts
          path: |
            supabase/migrations
            supabase/.temp/**

  smoke:
    name: Smoke edge functions
    runs-on: ubuntu-latest
    needs: migrations
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Make smoke executable
        run: chmod +x ./scripts/smoke.sh

      - name: Run smoke.sh
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}              # optional; used by smoke.sh if needed
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          set -euo pipefail
          ./scripts/smoke.sh 2>&1 | tee smoke.log
          echo "### Smoke output" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -n 200 smoke.log >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy Edge Functions
    runs-on: ubuntu-latest
    needs: smoke
    if: needs.smoke.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Login & link
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          echo "${SUPABASE_ACCESS_TOKEN}" | supabase login --token -
          supabase link --project-ref "${SUPABASE_PROJECT_REF}"
      - name: Define function flags map
        env:
          FUNCTION_FLAGS: ${{ vars.FUNCTION_FLAGS }}
        run: |
          set -euo pipefail
          {
            echo 'flags_for() {'
            echo '  local fn="$1"'
            echo '  declare -A FLAGS=()'
            echo '  # Optional override: repo variable FUNCTION_FLAGS like: pricing="" jobs="--no-verify-jwt"'
            echo '  for pair in '"$FUNCTION_FLAGS"'; do'
            echo '    [[ -z "$pair" ]] && continue'
            echo '    local name=${pair%%=*}'; echo '    local val=${pair#*=}'
            echo '    FLAGS[$name]=$val'
            echo '  done'
            echo '  # Small default map (tweak as needed)'
            echo '  case "$fn" in'
            echo '    stripe_webhook|kyc_webhook|admin_*|payments_*|uploads|matching|quotes|bookings*|jobs|locations*|org_* ) default="--no-verify-jwt" ;;
                  * ) default="--no-verify-jwt" ;;'
            echo '  esac'
            echo '  if [[ -n "${FLAGS[$fn]:-}" ]]; then echo "${FLAGS[$fn]}"; else echo "$default"; fi'
            echo '}'
          } > ./flags-map.sh
          echo "Wrote flags-map.sh"
      - name: Detect changed functions
        id: cf
        uses: tj-actions/changed-files@v45
        with:
          files: |
            supabase/functions/**

      - name: Build function list
        id: fl
        run: |
          set -euo pipefail
          changed=()
          while IFS= read -r f; do
            dir=$(echo "$f" | awk -F/ '/^supabase\/functions\//{print $3}')
            if [ -n "$dir" ]; then changed+=("$dir"); fi
          done <<< "${{ steps.cf.outputs.all_changed_files }}"
          if [ ${#changed[@]} -eq 0 ]; then
            echo "list=ALL" >> $GITHUB_OUTPUT
          else
            printf "list=%s\n" "$(printf "%s\n" "${changed[@]}" | sort -u | tr '\n' ' ')" >> $GITHUB_OUTPUT
          fi

      - name: Deploy functions (changed or all)
        run: |
          set -euo pipefail
          source ./flags-map.sh
          if [ "${{ steps.fl.outputs.list }}" = "ALL" ]; then
            echo "No function diffs detected; deploying all"
            for d in supabase/functions/*; do
              [ -d "$d" ] || continue
              fn=$(basename "$d")
              echo "Deploying $fn"
              flags="$(flags_for "$fn")"
              supabase functions deploy "$fn" ${flags}
            done
          else
            for fn in ${{ steps.fl.outputs.list }}; do
              echo "Deploying $fn"
              flags="$(flags_for "$fn")"
              supabase functions deploy "$fn" ${flags}
            done
          fi

      - name: Post-deploy health check
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ADMIN_API_SECRET: ${{ secrets.ADMIN_API_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          set -euo pipefail
          chmod +x ./scripts/smoke.sh
          ./scripts/smoke.sh 2>&1 | tee post_deploy_smoke.log
